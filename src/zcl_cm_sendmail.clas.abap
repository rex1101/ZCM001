class ZCL_CM_SENDMAIL definition
  public
  final
  create public .

public section.

  interfaces ZIF_CM_SENDMAIL_INBOUND .

  methods CONSTRUCTOR .
  class-methods MT_SEND_MAIL_DEMO .
  class-methods MT_SIMPLE_SEND_MAIL_DEMO .
protected section.
private section.
ENDCLASS.



CLASS ZCL_CM_SENDMAIL IMPLEMENTATION.


  method CONSTRUCTOR.


  CREATE OBJECT ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE.

  ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-MAILTYPE = 'H'.   "邮件类型 H HTML显示 R 附件
  ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-OBJTP = 'XLS'.   "邮件附件扩展名

  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->INITIALIZATION.


  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_SET_HTML_HEADER.

  endmethod.


  method MT_SEND_MAIL_DEMO.

*
*
** 收件人地址
*  DATA:LS_RECIPIENTS TYPE ADR6.
*
*  DATA: LV_TABNAME TYPE TABNAME.
*  DATA: LT_HTML_BODY TYPE SOLI_TAB,
*        LS_BODY TYPE SOLI.
*
*  DATA: LO_SENDMAIL_COMMON TYPE REF TO ZCL_CM_SENDMAIL.
*  DATA: LV_FILENAME TYPE RSBFILENAME.
*
**--------------------- Defined Var ----------------------
*  DATA: LT_BODY TYPE TABLE OF zcmt0001.
*  LV_TABNAME = 'zcmt0001'.
*  LV_FILENAME = '采购订单已经到货'.
*  SET LOCALE LANGUAGE '1'.
*
*  BREAK SUNHM.
**--------------------- Defined Var ----------------------
*
*
*  CREATE OBJECT LO_SENDMAIL_COMMON.
*
*  CONCATENATE 'Maria' '@trelleborg.com' INTO LS_RECIPIENTS-SMTP_ADDR.
*  APPEND LS_RECIPIENTS TO LO_SENDMAIL_COMMON->ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS.
*
*  CONCATENATE 'Open PO Reminding---' 'test' INTO LO_SENDMAIL_COMMON->ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-SUBJECT.
*
*  LS_BODY-LINE = '*   目的在于提醒您: 下面这些采购订单已经到货，3天内未质检，请及时联系相关人员处理。（ZMM_029）'.
*  APPEND LS_BODY TO LT_HTML_BODY.
*
*  CALL METHOD LO_SENDMAIL_COMMON->ZIF_CM_SENDMAIL_INBOUND~MT_SET_IT2HTMLHEADER_FACT
*    EXPORTING
*      IV_STR_NAME = LV_TABNAME.
*
*
*  CALL METHOD LO_SENDMAIL_COMMON->ZIF_CM_SENDMAIL_INBOUND~MT_CREATE_HTML_BODY
*    EXPORTING
*      IT_TABLE     = LT_BODY
*      IT_HTML_BODY = LT_HTML_BODY.
*
*  CALL METHOD LO_SENDMAIL_COMMON->ZIF_CM_SENDMAIL_INBOUND~MT_SET_IT2BINTAB
*    EXPORTING
*      IT_TABLE     = LT_BODY
*      IV_FILE_NAME = LV_FILENAME
*      IV_FILE_TYPE = 'XLS'.
*
*  CALL METHOD LO_SENDMAIL_COMMON->ZIF_CM_SENDMAIL_INBOUND~MT_PAPER_SEND_MAIL.
*  REFRESH:LT_BODY[].
*  FREE LO_SENDMAIL_COMMON.

  endmethod.


  method MT_SIMPLE_SEND_MAIL_DEMO.
*  DATA: GT_OUT TYPE TABLE OF ZMM_013_OUT.
*  DATA: LV_SUBJECT TYPE SO_OBJ_DES.
*  DATA: LS_RECIPIENTS TYPE ADR6.
*
*  DATA:GO_SENDMAIL TYPE REF TO ZCL_CM_SENDMAIL.
*
*
*  SORT GT_OUT BY EKGRP.
*
*
*  SELECT * FROM EBAN INTO CORRESPONDING FIELDS OF TABLE GT_OUT
*    WHERE ERNAM <> 'General'
*    AND ERDAT >= '20220101' AND ERDAT < '20221001'
*    AND KNTTP <> 'M'
*    AND LOEKZ <> 'X'
*    AND FRGKZ <> '4'
*    AND BANPR <> '08'
*    AND ZRETURN = ''
*    .
*
**    Mail Title
*  CONCATENATE 'PR_UNRELEASED' ' list' INTO LV_SUBJECT.
*
*  CREATE OBJECT GO_SENDMAIL.
**  smtp To Address
*  LS_RECIPIENTS-SMTP_ADDR = 'maria.zhang@trelleborg.com'.
*  APPEND LS_RECIPIENTS TO ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS.
*
*  CALL METHOD GO_SENDMAIL->ZIF_CM_SENDMAIL_INBOUND~MT_SIMPLE_SEND_MAIL
*    EXPORTING
*      STRUCTURE_NAME = 'ZMM_013_OUT'
*      LFT_HTML_OUT   = GT_OUT
*      SUBJECT        = LV_SUBJECT.
*  FREE GO_SENDMAIL.


  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~FREE.


  IF ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE IS NOT INITIAL.
    CLEAR:ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GV_LOG_UUID.
    CLEAR:ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_LOG_HEADER.
    CLEAR:ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE.
    REFRESH:ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GT_LOG_CTR[].
  ENDIF.


  FREE: ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE.
  FREE: ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST.
  FREE: ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF.
  FREE: ZIF_CM_SENDMAIL_INBOUND~GS_HTML_DEADER.
  FREE: ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS[].
  FREE: ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY[].
  FREE: ZIF_CM_SENDMAIL_INBOUND~GT_HTML_HEADER_FACT[].
  FREE: ZIF_CM_SENDMAIL_INBOUND~GT_ATTACHMENTS[].


  REFRESH:ZIF_CM_SENDMAIL_INBOUND~GT_ATTACHMENTS[],
          ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS[],
          ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY[],
          ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS[].

  CLEAR: ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF,ZIF_CM_SENDMAIL_INBOUND~GS_HTML_DEADER.

  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_CREATE_HTML_BODY.


  DATA: LT_HTML TYPE TABLE OF W3HTML.
  DATA: LS_BODY TYPE SOLI.
  DATA:LS_HTML TYPE W3HTML.
  DATA: LV_USER TYPE W3_HTML.

  CALL FUNCTION 'ZCM_SEND_MAIL_IT2HTML'
    EXPORTING
      IT_W3HEAD     = ZIF_CM_SENDMAIL_INBOUND~GT_HTML_HEADER_FACT
      IS_TABLE_HEAD = ZIF_CM_SENDMAIL_INBOUND~GS_HTML_DEADER
    TABLES
      ET_HTML       = LT_HTML
      IT_TABLE      = IT_TABLE.


  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_BBODY.

  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_P
    EXPORTING
      BODY_MSG = '     Dear ：User    '.

  IF SY-MANDT <> '800'.
    CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_P
      EXPORTING
        BODY_MSG = '*    以下邮件由--------  测试程序  ------------发送.'.
  ENDIF.

  CONCATENATE '该程序运行于' SY-CPROG INTO LS_BODY-LINE.
  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_P
    EXPORTING
      BODY_MSG = LS_BODY-LINE.
  CLEAR: LS_BODY.

  LOOP AT IT_HTML_BODY INTO LS_BODY.
    CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_P
      EXPORTING
        BODY_MSG = LS_BODY-LINE.
    CLEAR: LS_BODY.
  ENDLOOP.

  LOOP AT LT_HTML INTO LS_HTML.
    APPEND LS_HTML TO ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY.
    CLEAR:LS_HTML.
  ENDLOOP.

  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_EBODY.



  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_BBODY.



  DATA:LS_HTML TYPE W3HTML.

  CLEAR LS_HTML.

  LS_HTML = '<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xfa="http://www.xfa.org/schema/xfa-template/2.1/"><head></head>'.

  APPEND LS_HTML TO ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY.



  CLEAR LS_HTML.

  LS_HTML = '<body>'.

  APPEND LS_HTML TO ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY.

  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_EBODY.


  DATA:LS_HTML TYPE W3HTML.
  CLEAR LS_HTML.

  CONCATENATE '<br>Regards</p></body>' '</html>' INTO LS_HTML SEPARATED BY SPACE.

  APPEND LS_HTML TO ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY.


  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_CREAT_HTML_P.



  DATA:LS_HTML TYPE W3HTML.

  CONCATENATE '<p>' BODY_MSG '<br>' ' ' INTO LS_HTML SEPARATED BY SPACE.

  APPEND LS_HTML TO ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY.



  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_GET_REC_ADDRESS.


  DATA: LT_ZMAILTABLE TYPE TABLE OF ZCMT0008,
         LS_ZMAILTABLE TYPE ZCMT0008.

* 收件人地址
  DATA: LS_RECIPIENTS TYPE ADR6.

  SELECT * FROM ZCMT0008 INTO CORRESPONDING FIELDS OF TABLE LT_ZMAILTABLE
    WHERE PROGRAMM = IV_PRO
    AND PARA1 = IV_PARA1
    AND PARA2 = IV_PARA2
    AND PARA3 = IV_PARA3
    AND PARA4 = IV_PARA4
    AND VALID_FROM <= SY-DATUM
    AND VALID_TO > SY-DATUM
*    AND PARA1 = GS_OUT-EKGRP
    .

  CHECK SY-SUBRC = 0.

  LOOP AT LT_ZMAILTABLE INTO LS_ZMAILTABLE.
    IF LS_ZMAILTABLE-RECIPIENT_ADDR IS NOT INITIAL.
      LS_RECIPIENTS-SMTP_ADDR = LS_ZMAILTABLE-RECIPIENT_ADDR.
      APPEND LS_RECIPIENTS TO ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS.
    ENDIF.

    IF LS_ZMAILTABLE-CC_ADDR IS NOT INITIAL AND LS_ZMAILTABLE-RECIPIENT_ADDR IS NOT INITIAL..
      LS_RECIPIENTS-SMTP_ADDR = LS_ZMAILTABLE-CC_ADDR.
      LS_RECIPIENTS-ENCODE = 'C'."copy address抄送
      APPEND LS_RECIPIENTS TO ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS.
    ENDIF.


  ENDLOOP.

  IF SY-MANDT <> '800' OR ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS IS INITIAL.
    REFRESH:ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS.
    LS_RECIPIENTS-SMTP_ADDR = 'rex.sun@trelleborg.com'.
    APPEND LS_RECIPIENTS TO ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS.
  ENDIF.


  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_GET_SEND_ADDRESS.


  DATA: LV_ADRESS TYPE ADDR3_VAL.
  DATA: LV_USR03 TYPE USR03.
  DATA: LV_ADD TYPE ADR6-SMTP_ADDR.
  DATA: LV_SEND_ADD TYPE ADR6-SMTP_ADDR.
*  DATA: LS_ZPFB_HLOG TYPE ZCMT0001.

  IF ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-SENDER_MAIL IS NOT INITIAL.
    SENDER_ADD = ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-SENDER_MAIL.
  ELSE.

* get sender email address.
    CALL FUNCTION 'SUSR_USER_ADDRESS_READ'
       EXPORTING
           USER_NAME              = SY-UNAME
*       READ_DB_DIRECTLY       = ' '
       IMPORTING
           USER_ADDRESS           = LV_ADRESS
           USER_USR03             = LV_USR03
       EXCEPTIONS
           USER_ADDRESS_NOT_FOUND = 1
           OTHERS                 = 2.

    SELECT SINGLE SMTP_ADDR
      FROM ADR6 INTO SENDER_ADD
      WHERE ADDRNUMBER = LV_ADRESS-ADDRNUMBER
      AND PERSNUMBER = LV_ADRESS-PERSNUMBER.

    IF SENDER_ADD IS INITIAL .
      SENDER_ADD = 'qda.pr@Trelleborg.com'.
    ENDIF.
    IF SENDER_ADD = 'rex.sun@Trelleborg.com'.
      SENDER_ADD = 'qda.pr@Trelleborg.com'.
    ENDIF.

  ENDIF.

  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_PAPER_SEND_MAIL.


  DATA: E_RESULT TYPE CHAR1.


  IF ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS[] IS INITIAL.

    ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-TYPE = 'W'.

    CONCATENATE '邮件' ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-SUBJECT '未发送(未找到收件人地址)'
    ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-MESSAGE
    INTO ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-MESSAGE.

  ELSE.

    CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_SEND_MAIL
      IMPORTING
        E_RESULT = E_RESULT.

    IF E_RESULT = 'X'.
      ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-TYPE = 'S'.
      CONCATENATE '邮件' ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-SUBJECT '发送成功' ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-MESSAGE INTO ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-MESSAGE.
    ELSE.
      ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-TYPE = 'E'.
      CONCATENATE '邮件' ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-SUBJECT '发送失败' ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-MESSAGE INTO ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-MESSAGE.
    ENDIF.

*------------------  add content log begin --------------------------
    DATA: LS_LOG_CTR TYPE ZCMT0004.
    FIELD-SYMBOLS: <FT_RETURN> TYPE ANY TABLE.
    LOOP AT ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GT_LOG_CTR INTO LS_LOG_CTR.
      ASSIGN (LS_LOG_CTR-CLASS_ATTRIBUTES) TO <FT_RETURN>.
      IF SY-SUBRC = 0.

        CHECK <FT_RETURN> IS NOT INITIAL.
        CALL METHOD ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->MT_SAVE_LOG_ITEM_RETURN
          EXPORTING
            FT_RETURN   = <FT_RETURN>
            IS_ZCMT0004 = LS_LOG_CTR
            UUID        = ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GV_LOG_UUID.

      ENDIF.
    ENDLOOP.
*------------------  add content log end --------------------------

  ENDIF.

    CALL METHOD ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->MT_UPDATE_LOG_STATE.
    CALL METHOD ZIF_CM_SENDMAIL_INBOUND~FREE.
  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_SEND_MAIL.


*Data Declaration
  DATA: LO_SENDER TYPE REF TO IF_SENDER_BCS VALUE IS INITIAL,
        L_RECIPIENT_MAIL TYPE ADR6-SMTP_ADDR.

  DATA : ITAB TYPE TABLE OF SVAL,
         LS_ITAB TYPE SVAL,
         I_RETURN.

  DATA: L_MSG_TYPE TYPE SO_OBJ_TP.
  DATA: LX_DOCUMENT_BCS TYPE REF TO CX_DOCUMENT_BCS VALUE IS INITIAL,
        ATTACHMENT_SUBJECT TYPE SO_OBJ_DES.

  DATA: LO_RECIPIENT TYPE REF TO IF_RECIPIENT_BCS VALUE IS INITIAL.
  DATA: LS_RECIPIENT TYPE ADR6,
        LS_ATTACHMENT TYPE RMPS_POST_CONTENT.

  DATA: LO_DOCUMENT TYPE REF TO CL_DOCUMENT_BCS VALUE IS INITIAL.
  DATA: LV_SEND_ADD TYPE AD_SMTPADR.


  CASE ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-MAILTYPE.
    WHEN 'X'. "
      CLEAR:L_MSG_TYPE.
    WHEN 'H'.
      L_MSG_TYPE = 'HTML'.     " HTML格式

    WHEN OTHERS.
      L_MSG_TYPE = 'RAW'.     " 普通格式
  ENDCASE.

*Prepare Mail Object
  CLASS CL_BCS DEFINITION LOAD.
  ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST = CL_BCS=>CREATE_PERSISTENT( ).

* Message body and subject
    LO_DOCUMENT = CL_DOCUMENT_BCS=>CREATE_DOCUMENT(
    I_TYPE = L_MSG_TYPE
     I_TEXT =  ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY
     I_SUBJECT = ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-SUBJECT ).



  IF ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-MAILTYPE = 'X' OR ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-MAILTYPE = 'A'.

*Send  attachment
    LOOP AT ZIF_CM_SENDMAIL_INBOUND~GT_ATTACHMENTS INTO LS_ATTACHMENT.
      ATTACHMENT_SUBJECT = LS_ATTACHMENT-SUBJECT.
      TRY.
          LO_DOCUMENT->ADD_ATTACHMENT(
          EXPORTING
          I_ATTACHMENT_TYPE = LS_ATTACHMENT-OBJTP
          I_ATTACHMENT_SUBJECT = ATTACHMENT_SUBJECT

          I_ATT_CONTENT_HEX = LS_ATTACHMENT-CONT_HEX
          I_ATT_CONTENT_TEXT = LS_ATTACHMENT-CONT_TEXT
           ).
        CATCH CX_DOCUMENT_BCS INTO LX_DOCUMENT_BCS.
      ENDTRY.
    ENDLOOP.

  ENDIF.

* Pass the document to send request
  ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST->SET_DOCUMENT( LO_DOCUMENT ).
  TRY.
*    get Mail Sender address
      CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_GET_SEND_ADDRESS
      IMPORTING SENDER_ADD = LV_SEND_ADD
        .
        LO_SENDER = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS( LV_SEND_ADD ).

* Set sender
      ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST->SET_SENDER(
         EXPORTING
           I_SENDER = LO_SENDER ).
    CATCH CX_ADDRESS_BCS.
      RETURN.
  ENDTRY.
* Set  recipients
  LOOP AT ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS INTO LS_RECIPIENT WHERE ENCODE = ''.
    IF LS_RECIPIENT-SMTP_ADDR IS NOT INITIAL.
      L_RECIPIENT_MAIL = LS_RECIPIENT-SMTP_ADDR .
      CONCATENATE L_RECIPIENT_MAIL ';' INTO ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-MESSAGE.
      IF SY-MANDT <> '800' .
        L_RECIPIENT_MAIL = 'rex.sun@trelleborg.com'.
        CONCATENATE L_RECIPIENT_MAIL ';' LS_RECIPIENT-SMTP_ADDR INTO ZIF_CM_SENDMAIL_INBOUND~GO_SAVE_LOG_UPDATE->GS_MESSAGE-MESSAGE.
      ENDIF.
    ELSE.
      L_RECIPIENT_MAIL = 'rex.sun@trelleborg.com'.
    ENDIF.
    TRY.
        LO_RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS( L_RECIPIENT_MAIL ).
      CATCH CX_ADDRESS_BCS .
    ENDTRY.

    ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST->ADD_RECIPIENT(
        EXPORTING
        I_RECIPIENT = LO_RECIPIENT
        I_EXPRESS = 'X' ).
  ENDLOOP.


* Set  copys
  LOOP AT ZIF_CM_SENDMAIL_INBOUND~GT_RECIPIENTS INTO LS_RECIPIENT WHERE ENCODE = 'C'.
    IF LS_RECIPIENT-SMTP_ADDR IS NOT INITIAL.
      L_RECIPIENT_MAIL = LS_RECIPIENT-SMTP_ADDR .
      IF SY-MANDT <> '800'.
        L_RECIPIENT_MAIL = 'rex.sun@trelleborg.com'.
      ENDIF.
      TRY.
          LO_RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS( L_RECIPIENT_MAIL ).
        CATCH CX_ADDRESS_BCS .
      ENDTRY.

    ENDIF.

    ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST->ADD_RECIPIENT(
        EXPORTING
        I_RECIPIENT = LO_RECIPIENT
        I_COPY       = 'X'
        I_EXPRESS = 'X' ).
  ENDLOOP.

  TRY.
      CALL METHOD ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST->SET_STATUS_ATTRIBUTES
        EXPORTING
          I_REQUESTED_STATUS = 'E'
          I_STATUS_MAIL      = 'E'.

* set send immediately flag
      ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST->SET_SEND_IMMEDIATELY( 'X' ).

* Send email
      ZIF_CM_SENDMAIL_INBOUND~GO_SEND_REQUEST->SEND(
        EXPORTING
         I_WITH_ERROR_SCREEN = 'X'
        RECEIVING
          RESULT = E_RESULT ).
      COMMIT WORK.
      WAIT UP TO 1 SECONDS.

    CATCH CX_SEND_REQ_BCS.
      E_RESULT = ''.
  ENDTRY.

  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_SET_HTML_HEADER.


  DATA: LV_DATE TYPE CHAR8.
  DATA: LV_TIME TYPE CHAR15.
  LV_DATE = SY-DATUM.
  LV_TIME = SY-UZEIT.
  ZIF_CM_SENDMAIL_INBOUND~GS_HTML_DEADER-TEXT = '请不要回复此邮件！这是由Trelleborg SAP系统自动产生的邮件.本邮件发送日期：'.
  CONCATENATE ZIF_CM_SENDMAIL_INBOUND~GS_HTML_DEADER-TEXT LV_DATE '.发送时间：' LV_TIME INTO ZIF_CM_SENDMAIL_INBOUND~GS_HTML_DEADER-TEXT.
  ZIF_CM_SENDMAIL_INBOUND~GS_HTML_DEADER-FONT = 'Arial'.
  ZIF_CM_SENDMAIL_INBOUND~GS_HTML_DEADER-SIZE = '5'.

  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_SET_IT2BINTAB.



  DATA: IT_ATTACH TYPE STANDARD TABLE OF SOLISTI1 .

  DATA: LS_ATTACHMENT TYPE RMPS_POST_CONTENT.

  DATA: LC_DESCR_REF TYPE REF TO CL_ABAP_STRUCTDESCR,
           LV_VALUE     TYPE CHAR128,
           LV_TEMP      TYPE STRING,
           LV_MID       TYPE STRING,
           LV_MID2       TYPE STRING,
           LV_TABIX     TYPE SY-TABIX.

  FIELD-SYMBOLS: <FS_INTABLE>  TYPE ANY.
  FIELD-SYMBOLS: <INTABLE_WA>  TYPE ABAP_COMPDESCR.

  CONSTANTS: C_TAB  TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB,
              C_CRET TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>CR_LF,
              C_MIMETYPE TYPE CHAR64
                         VALUE 'APPLICATION/MSEXCEL;charset=utf-16le'.
  DATA:   V_XATTACH TYPE XSTRING,

           IT_BINARY_ATTACH TYPE SOLIX_TAB.

  FIELD-SYMBOLS: <FS_ATTACH_SOURCE> TYPE ANY.
  FIELD-SYMBOLS: <FS_ATTACH> TYPE ANY.


  DATA: LS_W3HEAD TYPE W3HEAD.

  "Excel HEAD
  LOOP AT ZIF_CM_SENDMAIL_INBOUND~GT_HTML_HEADER_FACT INTO LS_W3HEAD.
    IF SY-TABIX = 1.
      LV_TEMP = LS_W3HEAD-TEXT.
    ELSE.
      CONCATENATE LV_TEMP LS_W3HEAD-TEXT  INTO LV_TEMP SEPARATED BY C_TAB.
    ENDIF.

  ENDLOOP.
  CONCATENATE LV_TEMP C_CRET INTO LV_MID.


*  "Excel Body
  LOOP AT IT_TABLE ASSIGNING <FS_ATTACH_SOURCE>.

    LV_TABIX = SY-TABIX.

    CLEAR LV_TEMP.
    LC_DESCR_REF ?= CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( <FS_ATTACH_SOURCE> ).
    LOOP AT LC_DESCR_REF->COMPONENTS ASSIGNING <INTABLE_WA>.
      ASSIGN COMPONENT SY-TABIX OF STRUCTURE  <FS_ATTACH_SOURCE> TO <FS_INTABLE>.
      LV_VALUE = <FS_INTABLE>.
      CONDENSE LV_VALUE.
      IF SY-TABIX = 1.
        LV_TEMP = LV_VALUE.
        CONTINUE.
      ENDIF.
      CONCATENATE LV_TEMP LV_VALUE
             INTO LV_TEMP SEPARATED BY C_TAB.
    ENDLOOP.

    CONCATENATE LV_MID LV_TEMP C_CRET INTO LV_MID.

  ENDLOOP.

*  Convert string to xstring type
*  'APPLICATION/MSEXCEL;charset=utf-16le'
  CALL FUNCTION 'SCMS_STRING_TO_XSTRING'
    EXPORTING
      TEXT     = LV_MID
      MIMETYPE = C_MIMETYPE
    IMPORTING
      BUFFER   = V_XATTACH
    EXCEPTIONS
      FAILED   = 1
      OTHERS   = 2.

*  Add the file header for utf-16le.             .
  IF SY-SUBRC = 0.
    CONCATENATE CL_ABAP_CHAR_UTILITIES=>BYTE_ORDER_MARK_LITTLE
                V_XATTACH INTO V_XATTACH IN BYTE MODE.
  ENDIF.

  CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
    EXPORTING
      BUFFER     = V_XATTACH
    TABLES
      BINARY_TAB = IT_BINARY_ATTACH.

  LS_ATTACHMENT-SUBJECT = IV_FILE_NAME.
  LS_ATTACHMENT-OBJTP = IV_FILE_TYPE.
  LS_ATTACHMENT-CONT_HEX[] = IT_BINARY_ATTACH[].
  APPEND LS_ATTACHMENT TO ZIF_CM_SENDMAIL_INBOUND~GT_ATTACHMENTS.
  CLEAR:LS_ATTACHMENT.


  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_SET_IT2HTMLBODY.



  DATA:    T_HEADER  TYPE STANDARD TABLE OF W3HEAD ,  "Header
           T_FIELDS  TYPE STANDARD TABLE OF W3FIELDS ,    "Fields
           T_HTML    TYPE STANDARD TABLE OF W3HTML,                          "Html
           WA_HEADER TYPE W3HEAD,
           W_HEAD    TYPE W3HEAD.

  DATA: LS_W3HEAD TYPE W3HEAD.


  LOOP AT ZIF_CM_SENDMAIL_INBOUND~GT_HTML_HEADER_FACT INTO LS_W3HEAD.

    "标题行设置
    CALL FUNCTION 'WWW_ITAB_TO_HTML_HEADERS'
      EXPORTING
        FIELD_NR = LS_W3HEAD-NR
        TEXT     = LS_W3HEAD-TEXT
        FGCOLOR  = LS_W3HEAD-FG_COLOR
        BGCOLOR  = LS_W3HEAD-BG_COLOR
      TABLES
        HEADER   = T_HEADER.

    CALL FUNCTION 'WWW_ITAB_TO_HTML_LAYOUT'
      EXPORTING
        FIELD_NR = LS_W3HEAD-NR
        FGCOLOR  = 'black'
        SIZE     = '3'
      TABLES
        FIELDS   = T_FIELDS.
    CLEAR:LS_W3HEAD.
  ENDLOOP.

*  MOVE-CORRESPONDING IS_TABLE_HEAD TO WA_HEADER.

*-Preparing the HTML from Intenal Table
  REFRESH T_HTML.
  CALL FUNCTION 'WWW_ITAB_TO_HTML'
    EXPORTING
      TABLE_HEADER = WA_HEADER
    TABLES
      HTML         = ZIF_CM_SENDMAIL_INBOUND~GT_HTML_BODY
      FIELDS       = T_FIELDS
      ROW_HEADER   = T_HEADER
      ITABLE       = IT_TABLE.



  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_SET_IT2HTMLHEADER_FACT.


  DATA: LT_FCAT TYPE LVC_T_FCAT. "存放列表的名称
  DATA: LS_FCAT TYPE LVC_S_FCAT. "存放列表的名称
*  定义HTML HEAD抬头
  DATA:LS_TABLE_HEAD TYPE W3HEAD.
  .

*  SY-LANGU = '1'.
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME       = IV_STR_NAME
    CHANGING
      CT_FIELDCAT            = LT_FCAT
    EXCEPTIONS
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      OTHERS                 = 3.


  LOOP AT LT_FCAT INTO LS_FCAT.
    LS_TABLE_HEAD-NR = LS_FCAT-COL_POS.
    LS_TABLE_HEAD-TEXT = LS_FCAT-SCRTEXT_M.
    LS_TABLE_HEAD-FG_COLOR  = IV_FG_COLOR.
    LS_TABLE_HEAD-BG_COLOR  = IV_BG_COLOR.
    APPEND LS_TABLE_HEAD TO ZIF_CM_SENDMAIL_INBOUND~GT_HTML_HEADER_FACT.
  ENDLOOP.


  endmethod.


  method ZIF_CM_SENDMAIL_INBOUND~MT_SIMPLE_SEND_MAIL.


*  DATA: LT_HTML_BODY TYPE SOLI_TAB,
*        LS_BODY TYPE SOLI.

*  DATA: LO_SENDMAIL_COMMON TYPE REF TO ZCL_SENDMAIL_COMMON.
  DATA: LV_FILENAME TYPE RSBFILENAME.



*--------------------- Defined Var ----------------------
  ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-SUBJECT = SUBJECT.
  ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-MAILTYPE = 'H'.   "邮件类型 H HTML显示 R 附件
  ZIF_CM_SENDMAIL_INBOUND~GS_MAIL_CONF-OBJTP = 'XLS'.   "邮件附件扩展名
  LV_FILENAME = SUBJECT.

  SET LOCALE LANGUAGE '1'.

*--------------------- Defined Var ----------------------


  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_SET_IT2HTMLHEADER_FACT
    EXPORTING
      IV_STR_NAME = STRUCTURE_NAME.


  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_CREATE_HTML_BODY
    EXPORTING
      IT_TABLE     = LFT_HTML_OUT
      IT_HTML_BODY = LFT_HTML_BODY.

  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_SET_IT2BINTAB
    EXPORTING
      IT_TABLE     = LFT_HTML_OUT
      IV_FILE_NAME = LV_FILENAME
      IV_FILE_TYPE = 'XLS'.

  CALL METHOD ZIF_CM_SENDMAIL_INBOUND~MT_PAPER_SEND_MAIL.

  endmethod.
ENDCLASS.
