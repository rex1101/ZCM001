class ZCL_CM_CUSTOM_LOG definition
  public
  final
  create public .

public section.

  class-data GV_LOG_UUID type SYSUUID_C .
  data GV_BASICLOG_FLAG type CHAR1 .
  data GV_INIT_FLAG type CHAR1 .
  class-data GS_LOG_HEADER type ZCMT0001 .
  data GS_LOG_MD type ZCMT0002 .
  class-data GS_MESSAGE type BAPIRET1 .
  class-data GT_LOG_CTR type ZCMT0004_TY .
  data DY_TABLE type ref to DATA .
  data DY_LINE type ref to DATA .

  methods MT_GET_FRONT_INFO_T .
  methods MT_GET_LOG_UUID .
  methods MT_SET_LOG_UUID
    changing
      value(UUID) type SYSUUID_C optional .
  methods MT_SET_LOG_BASIC_INFO .
  methods MT_SET_LOG_ZPFB_HLOG
    importing
      !LOG_HEADER type ZCMT0001 .
  methods MT_GET_FRONT_INFO .
  methods MT_UPDATE_LOG_HEADER_RE
    importing
      !LOG_HEADER type ZCMT0001 .
  methods MT_UPDATE_LOG_STATE .
  class-methods MT_SAVE_LOG_ITEM_RETURN
    importing
      !FT_RETURN type ANY TABLE
      !IS_ZCMT0004 type ZCMT0004
      !UUID type SYSUUID_C .
  methods MT_CREATION_LOG_HEADER .
  methods MT_CREATION_ATTACHMENTS_LOG
    importing
      !IV_LOCALFILE type LOCALFILE .
  methods MT_CREATION_STRUCTURE_LOG
    importing
      !TABNAME type TABNAME
      !IS_STR type ANY
      !SAVE_COMMIT type CHAR1 default 'X'
    changing
      !OT_OUT type STANDARD TABLE optional .
  methods MT_CREATION_INTERNAL_TABLE_LOG
    importing
      !TABNAME type TABNAME
      !IT_TABLE type STANDARD TABLE
      !SAVE_COMMIT type CHAR1 default 'X'
    changing
      !OT_OUT type STANDARD TABLE optional .
  methods INITIALIZATION .
  methods CONSTRUCTOR
    importing
      value(SOUR_UUID) type SYSUUID_C optional
      !MLOG type ZCMT0002 optional
      !COMMIT_WORK type CHAR1 default 'X' .
  methods FREE .
protected section.
private section.

  data GV_COMMIT_WORK type CHAR1 .
ENDCLASS.



CLASS ZCL_CM_CUSTOM_LOG IMPLEMENTATION.


  method CONSTRUCTOR.

  IF MLOG-INTERFACE_CLASS IS NOT INITIAL.
    SELECT SINGLE * FROM ZCMT0002 INTO CORRESPONDING FIELDS OF GS_LOG_MD WHERE INTERFACE_CLASS = MLOG-INTERFACE_CLASS.
  ELSE.
    IF SY-TCODE IS NOT INITIAL.
      SELECT SINGLE * FROM ZCMT0002 INTO CORRESPONDING FIELDS OF GS_LOG_MD WHERE TCODE = SY-TCODE.
      IF SY-SUBRC <> 0.
        SELECT SINGLE * FROM ZCMT0002 INTO CORRESPONDING FIELDS OF GS_LOG_MD WHERE PROGRAMM = SY-CPROG.
      ENDIF.
    ELSE.
      SELECT SINGLE * FROM ZCMT0002 INTO CORRESPONDING FIELDS OF GS_LOG_MD WHERE PROGRAMM = SY-CPROG.
    ENDIF.

  ENDIF.

  GV_COMMIT_WORK = COMMIT_WORK.

  IF GV_COMMIT_WORK <> GS_LOG_MD-SAVE_COMMIT.
    GV_COMMIT_WORK = GS_LOG_MD-SAVE_COMMIT.
  ENDIF.
*  GV_SUBJECT = GS_LOG_MD-INTERFACE_DESC.

  CHECK GS_LOG_MD-ACTIV = 'X'.

  IF SOUR_UUID IS NOT INITIAL.
    GS_LOG_HEADER-SOUR_UUID = SOUR_UUID.
  ENDIF.


  CALL METHOD INITIALIZATION.

  GV_INIT_FLAG = 'X'.

  IF GS_LOG_MD-JOBLOG_TYPE = 'R'.
    GS_LOG_HEADER-STATE = 'A'.
  ENDIF.

  CALL METHOD MT_CREATION_LOG_HEADER.

*  增加判断接口使用
*  EXPORT INTERFACE = INTERFACE TO MEMORY ID 'Globe_Interface_class_H'.
  EXPORT INTERFACEUUID = GV_LOG_UUID TO MEMORY ID 'Globe_Interface_UUID'.

  IF GS_LOG_MD-SAVE_RETURN = 'X'.

    SELECT *
      FROM ZCMT0004
      INTO CORRESPONDING FIELDS OF TABLE GT_LOG_CTR
      WHERE INTERFACE_CLASS = GS_LOG_MD-INTERFACE_CLASS
      .

  ENDIF.
  endmethod.


  method FREE.

      CLEAR:GV_LOG_UUID,GS_LOG_HEADER,GV_BASICLOG_FLAG,GS_MESSAGE,GS_LOG_MD.

  endmethod.


  method INITIALIZATION.


  CALL METHOD MT_GET_LOG_UUID.
  CALL METHOD MT_SET_LOG_BASIC_INFO.

  GV_INIT_FLAG = 'X'.
  endmethod.


  method MT_CREATION_ATTACHMENTS_LOG.


  DATA:LT_DATATAB      TYPE TABLE OF SSFDATA,
        LS_DATATAB TYPE SSFDATA.
  DATA: CTAB255 TYPE STANDARD TABLE OF SOLISTI1 .

  DATA: LV_PATH TYPE DBMSGORA-FILENAME.
  DATA: LV_STRING TYPE STRING.
  DATA: LV_FILENAME TYPE SDBAH-ACTID.
  DATA: LV_EXTENSION TYPE SDBAD-FUNCT.
  DATA: LV_BIN_FILESIZE TYPE I.
  DATA: LV_BUFFER       TYPE CHAR20.
  DATA: LV_BUZEI       TYPE CHAR3.

  LV_PATH = IV_LOCALFILE.
  LV_STRING = IV_LOCALFILE.

*  CALL METHOD MT_SET_LOG_UUID.
*  CALL METHOD MT_SET_LOG_BASIC_INFO.

  CALL FUNCTION 'SPLIT_FILENAME'
    EXPORTING
      LONG_FILENAME  = LV_PATH
    IMPORTING
      PURE_FILENAME  = LV_FILENAME
      PURE_EXTENSION = LV_EXTENSION.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      FILENAME        = LV_STRING
      FILETYPE        = 'BIN'
    IMPORTING
      FILELENGTH      = LV_BIN_FILESIZE
    TABLES
      DATA_TAB        = LT_DATATAB
    EXCEPTIONS
      FILE_OPEN_ERROR = 1
      FILE_READ_ERROR = 2
      INVALID_TYPE    = 3
      NO_BATCH        = 4
      OTHERS          = 5.


  LV_BUFFER = LV_BIN_FILESIZE.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    LEAVE PROGRAM.
  ENDIF.


  DATA: L_ID TYPE C LENGTH 66.
  DATA: LV_RELID TYPE INDX_RELID.

  DATA: LT_ZCMT0004 TYPE TABLE OF ZCMT0004,
        LS_ZCMT0004 TYPE ZCMT0004.

  DATA: LS_ZCMT0003 TYPE ZCMT0003.
  DATA: LS_ZCMT0002 TYPE ZCMT0002.

  SELECT SINGLE *
    FROM ZCMT0002
    INTO CORRESPONDING FIELDS OF LS_ZCMT0002
    WHERE LOG_TYPE = GS_LOG_HEADER-LOG_TYPE
    AND INTERFACE_CLASS = GS_LOG_HEADER-INTERFACE_CLASS
    .

  DATA: LT_ZCMT0007 TYPE TABLE OF ZCMT0007,
    LS_ZCMT0007 TYPE ZCMT0007.

  LS_ZCMT0007-UUID = GS_LOG_HEADER-UUID.
  LS_ZCMT0007-LOG_TYPE = GS_LOG_HEADER-LOG_TYPE.
  LS_ZCMT0007-INTERFACE_CLASS = GS_LOG_HEADER-INTERFACE_CLASS.
  LS_ZCMT0007-BUZEI = '001'.
  LS_ZCMT0007-FILENAME = LV_FILENAME."
  LS_ZCMT0007-EXTENSION = LV_EXTENSION."
  LS_ZCMT0007-BUFFER = LV_BIN_FILESIZE."
  APPEND LS_ZCMT0007 TO LT_ZCMT0007.
  MODIFY ZCMT0007 FROM TABLE LT_ZCMT0007.

  CONCATENATE  LS_ZCMT0007-UUID LS_ZCMT0007-LOG_TYPE LS_ZCMT0007-INTERFACE_CLASS LS_ZCMT0007-BUZEI  INTO L_ID RESPECTING BLANKS.

  EXPORT FT_RETURN = LT_DATATAB
  TO DATABASE ZCMT0003(RT)
    FROM LS_ZCMT0003
  ID L_ID.


  endmethod.


  method MT_CREATION_INTERNAL_TABLE_LOG.


  FIELD-SYMBOLS: <DYN_TABLE> TYPE TABLE.
  FIELD-SYMBOLS: <DYN_WA> TYPE ANY,
               <FS> TYPE ANY,
               <FS_STR> TYPE ANY.
  DATA:LT_FCAT TYPE LVC_T_FCAT.
  DATA:LS_FCAT TYPE LVC_S_FCAT.
  DATA:DY_WA TYPE REF TO DATA.
  DATA CTHEAD_COUNTER TYPE C LENGTH 3.
  DATA: LV_INDEX TYPE SY-INDEX.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME       = TABNAME
    CHANGING
      CT_FIELDCAT            = LT_FCAT
    EXCEPTIONS
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      OTHERS                 = 3.
  DESCRIBE TABLE LT_FCAT LINES CTHEAD_COUNTER.
  LV_INDEX = CTHEAD_COUNTER - 3."Del mandt uuid BUZEI field

*此方法用于构建动态内表，输入=构建的结构，输出=dy_table
  CALL METHOD CL_ALV_TABLE_CREATE=>CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG = LT_FCAT
    IMPORTING
      EP_TABLE        = DY_TABLE.
  ASSIGN DY_TABLE->* TO <DYN_TABLE>.
  CREATE DATA DY_WA LIKE LINE OF <DYN_TABLE>.
  ASSIGN DY_WA->* TO <DYN_WA>.

  LOOP AT IT_TABLE ASSIGNING <FS_STR>.
    MOVE-CORRESPONDING <FS_STR> TO <DYN_WA>.
    ASSIGN COMPONENT 2 OF STRUCTURE <DYN_WA> TO <FS>. "assign bdc value to excel
    <FS> = GV_LOG_UUID.
    ASSIGN COMPONENT 3 OF STRUCTURE <DYN_WA> TO <FS>. "assign bdc value to excel
    <FS> = SY-TABIX.
    APPEND <DYN_WA> TO <DYN_TABLE>.
    CLEAR <DYN_WA>.
  ENDLOOP.

  OT_OUT[] = <DYN_TABLE>.

  MODIFY (TABNAME) FROM TABLE <DYN_TABLE>.

  IF GV_COMMIT_WORK = 'X'.
    COMMIT WORK.
  ENDIF.


  endmethod.


  method MT_CREATION_LOG_HEADER.

     DATA: LT_LOG_HEADER TYPE TABLE OF ZCMT0001,
        LS_LOG_HEADER TYPE ZCMT0001.

  CHECK GS_LOG_MD-SAVE_HEADER = 'X'.

  GS_LOG_HEADER-STIME = SY-UZEIT.
  APPEND GS_LOG_HEADER TO LT_LOG_HEADER.
  MODIFY ZCMT0001 FROM TABLE LT_LOG_HEADER.

  IF GV_COMMIT_WORK = 'X'.
  COMMIT WORK AND WAIT.
  ENDIF.
  CLEAR:GV_BASICLOG_FLAG.



  endmethod.


  method MT_CREATION_STRUCTURE_LOG.


  FIELD-SYMBOLS: <DYN_TABLE> TYPE TABLE.
  FIELD-SYMBOLS: <DYN_WA> TYPE ANY,
               <FS> TYPE ANY.
  DATA:LT_FCAT TYPE LVC_T_FCAT.
  DATA:LS_FCAT TYPE LVC_S_FCAT.
  DATA:DY_WA TYPE REF TO DATA.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME       = TABNAME
    CHANGING
      CT_FIELDCAT            = LT_FCAT
    EXCEPTIONS
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      OTHERS                 = 3.


*此方法用于构建动态内表，输入=构建的结构，输出=dy_table
  CALL METHOD CL_ALV_TABLE_CREATE=>CREATE_DYNAMIC_TABLE
    EXPORTING
      IT_FIELDCATALOG = LT_FCAT
    IMPORTING
      EP_TABLE        = DY_TABLE.

  ASSIGN DY_TABLE->* TO <DYN_TABLE>.
  CREATE DATA DY_WA LIKE LINE OF <DYN_TABLE>.
  ASSIGN DY_WA->* TO <DYN_WA>.
  MOVE-CORRESPONDING IS_STR TO <DYN_WA>.
  MOVE-CORRESPONDING IS_STR TO <DYN_WA>.
  ASSIGN COMPONENT 2 OF STRUCTURE <DYN_WA> TO <FS>. "assign bdc value to excel
  <FS> = GV_LOG_UUID.
  APPEND <DYN_WA> TO <DYN_TABLE>.
  CLEAR <DYN_WA>.

  OT_OUT[] = <DYN_TABLE>.

    MODIFY (TABNAME) FROM TABLE <DYN_TABLE>.
  IF GV_COMMIT_WORK = 'X'.
    COMMIT WORK.
  ENDIF.

  endmethod.


  method MT_GET_FRONT_INFO.


  DATA: LV_ADUSER TYPE STRING.
  DATA: OPCODE_USR_ATTR(1)  TYPE X VALUE 5.
  DATA:IP TYPE STRING.

  CHECK GS_LOG_MD-JOBLOG_TYPE = 'F'.
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>GET_USER_NAME
    CHANGING
      USER_NAME            = LV_ADUSER
    EXCEPTIONS
      CNTL_ERROR           = 1
      ERROR_NO_GUI         = 2
      NOT_SUPPORTED_BY_GUI = 3
      OTHERS               = 4.

* 获取终端名   OPCODE 码在 TSKHINCL 252行
  CALL 'ThUsrInfo' ID 'OPCODE' FIELD OPCODE_USR_ATTR
              ID'TERMINAL' FIELD GS_LOG_HEADER-TERMINAL.


  "获取登陆IP地址
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>GET_IP_ADDRESS
    RECEIVING
      IP_ADDRESS = IP.

  GS_LOG_HEADER-IP_ADDRESS = IP.


  GS_LOG_HEADER-AD_USER = LV_ADUSER.

  endmethod.


  method MT_GET_FRONT_INFO_T.


  DATA: LV_ADUSER TYPE STRING.
  DATA: OPCODE_USR_ATTR(1)  TYPE X VALUE 5.
  DATA:IP TYPE STRING.

  CHECK GS_LOG_MD-JOBLOG_TYPE = 'F'.
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>GET_USER_NAME
    CHANGING
      USER_NAME            = LV_ADUSER
    EXCEPTIONS
      CNTL_ERROR           = 1
      ERROR_NO_GUI         = 2
      NOT_SUPPORTED_BY_GUI = 3
      OTHERS               = 4.

* 获取终端名   OPCODE 码在 TSKHINCL 252行
  CALL 'ThUsrInfo' ID 'OPCODE' FIELD OPCODE_USR_ATTR
              ID'TERMINAL' FIELD GS_LOG_HEADER-TERMINAL.


  "获取登陆IP地址
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>GET_IP_ADDRESS
    RECEIVING
      IP_ADDRESS = IP.

  GS_LOG_HEADER-IP_ADDRESS = IP.


  GS_LOG_HEADER-AD_USER = LV_ADUSER.



  endmethod.


  method MT_GET_LOG_UUID.

  IF GV_LOG_UUID IS INITIAL.
    CALL FUNCTION 'SYSTEM_UUID_C_CREATE'
      IMPORTING
        UUID = GV_LOG_UUID.
    GS_LOG_HEADER-UUID = GV_LOG_UUID.
  ENDIF.
  endmethod.


  method MT_SAVE_LOG_ITEM_RETURN.


*  CHECK GS_LOG_MD-SAVE_RETURN = 'X'.

  DATA: L_ID TYPE C LENGTH 63.
  DATA: LV_RELID TYPE INDX_RELID.

  DATA: LT_ZCMT0004 TYPE TABLE OF ZCMT0004,
        LS_ZCMT0004 TYPE ZCMT0004.

  DATA: LS_ZCMT0003 TYPE ZCMT0003.
  DATA: LS_ZCMT0002 TYPE ZCMT0002.


  CHECK IS_ZCMT0004-INTERFACE_CLASS IS NOT INITIAL.

  SELECT SINGLE *
    FROM ZCMT0002
    INTO CORRESPONDING FIELDS OF LS_ZCMT0002
    WHERE LOG_TYPE = IS_ZCMT0004-LOG_TYPE
    AND INTERFACE_CLASS = IS_ZCMT0004-INTERFACE_CLASS
    .

  CHECK LS_ZCMT0002-SAVE_RETURN = 'X'.

  CONCATENATE  GS_LOG_HEADER-UUID IS_ZCMT0004-LOG_TYPE IS_ZCMT0004-INTERFACE_CLASS IS_ZCMT0004-BUZEI INTO L_ID RESPECTING BLANKS.

  EXPORT FT_RETURN = FT_RETURN
  TO DATABASE ZCMT0003(RT)
    FROM LS_ZCMT0003
  ID L_ID.


  endmethod.


  method MT_SET_LOG_BASIC_INFO.


  DATA: LS_ZPFB_HLOG TYPE ZCMT0001.


  CHECK GV_BASICLOG_FLAG = ''.
  GS_LOG_HEADER-UUID = GV_LOG_UUID.
  GS_LOG_HEADER-LOG_TYPE = GS_LOG_MD-LOG_TYPE.
  GS_LOG_HEADER-ERDAT = SY-DATUM.
  GS_LOG_HEADER-LANGU = SY-LANGU.
  GS_LOG_HEADER-UNAME = SY-UNAME.
  GS_LOG_HEADER-PROGNAME = SY-CPROG.
  GS_LOG_HEADER-TCODE = SY-TCODE.
  GS_LOG_HEADER-STIME = SY-UZEIT.
  GS_LOG_HEADER-INTERFACE_CLASS = GS_LOG_MD-INTERFACE_CLASS.
  GS_LOG_HEADER-SUBJECT = GS_LOG_MD-INTERFACE_DESC.
  GS_LOG_HEADER-SYBATCH = SY-BATCH.
*  GS_LOG_HEADER-AD_USER = GV_ADUSER.

*  IF SY-BATCH = ''."获取前台信息
    CALL METHOD MT_GET_FRONT_INFO.
*  ENDIF.

  IF GS_LOG_HEADER-SOUR_UUID IS NOT INITIAL.
    IF GS_LOG_HEADER-SOUR_UUID <> GS_LOG_HEADER-UUID.
      SELECT SINGLE *
        FROM ZCMT0001
        INTO CORRESPONDING FIELDS OF LS_ZPFB_HLOG
        WHERE UUID = GS_LOG_HEADER-SOUR_UUID.
      IF SY-SUBRC = 0.
        UPDATE ZCMT0001
        SET DEST_UUID = GV_LOG_UUID
        WHERE UUID = GS_LOG_HEADER-SOUR_UUID
              .
      ELSE.
        GS_LOG_HEADER-DEST_UUID = GV_LOG_UUID.
      ENDIF.
    ENDIF.

  ENDIF.



  GV_BASICLOG_FLAG = 'X'.

  endmethod.


  method MT_SET_LOG_UUID.


  IF UUID IS INITIAL.
    CALL METHOD MT_GET_LOG_UUID.
  ELSE.
    GV_LOG_UUID = UUID.
    GS_LOG_HEADER-UUID = UUID.
  ENDIF.


  endmethod.


  method MT_SET_LOG_ZPFB_HLOG.

  MOVE-CORRESPONDING LOG_HEADER TO GS_LOG_HEADER.

  endmethod.


  method MT_UPDATE_LOG_HEADER_RE.

      DATA: LT_LOG_HEADER TYPE TABLE OF ZCMT0001.

  CHECK GS_LOG_MD-ACTIV = 'X'.

  CHECK LOG_HEADER-UUID IS NOT INITIAL AND LOG_HEADER-LOG_TYPE IS NOT INITIAL.

  CALL METHOD MT_SET_LOG_ZPFB_HLOG
    EXPORTING
      LOG_HEADER = LOG_HEADER.

  APPEND LOG_HEADER TO LT_LOG_HEADER.
  MODIFY ZCMT0001 FROM TABLE LT_LOG_HEADER.

  IF GS_LOG_MD-SAVE_HEADER = 'X'.
    IF GV_COMMIT_WORK = 'X'.
    COMMIT WORK.
    ENDIF.
    CLEAR:GV_BASICLOG_FLAG.
  ENDIF.

  endmethod.


  method MT_UPDATE_LOG_STATE.


  UPDATE ZCMT0001
  SET MSG = GS_MESSAGE-MESSAGE
      STATE = GS_MESSAGE-TYPE
      SUBJECT = GS_LOG_MD-INTERFACE_DESC
      UTIME = SY-UZEIT
      UDATE = SY-DATUM
  WHERE UUID = GV_LOG_UUID
    AND LOG_TYPE = GS_LOG_MD-LOG_TYPE
        .
  IF GS_LOG_MD-INTERFACE_CLASS IS NOT INITIAL.
    UPDATE ZCMT0002
    SET CHDAT = SY-DATUM
    WHERE INTERFACE_CLASS = GS_LOG_MD-INTERFACE_CLASS
    AND LOG_TYPE = GS_LOG_MD-LOG_TYPE
    .
  ENDIF.

  IF GS_LOG_MD-SAVE_HEADER = 'X'.
    IF GV_COMMIT_WORK = 'X'.
      COMMIT WORK AND WAIT.
    ENDIF.
  ENDIF.


  endmethod.
ENDCLASS.
